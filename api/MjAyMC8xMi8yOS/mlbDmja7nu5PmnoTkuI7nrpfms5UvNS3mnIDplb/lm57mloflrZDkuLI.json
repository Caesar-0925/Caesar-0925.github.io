{"title":"5. 最长回文子串","date":"2020-12-29T09:34:00.000Z","date_formatted":{"ll":"2020年12月29日","L":"2020/12/29","MM-DD":"12-29"},"link":"2020/12/29/数据结构与算法/5-最长回文子串","comments":true,"tags":["动态规划"],"categories":["数据结构与算法"],"updated":"2020-12-29T16:15:12.841Z","content":"<h2 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h2>\n<p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设  s 的最大长度为 1000。</p>\n<h3 id=\"示例-1：\">示例 1：<a title=\"#示例-1：\" href=\"#示例-1：\"></a></h3>\n<p>输入: “babad”<br>\n输出: “bab”<br>\n注意: “aba” 也是一个有效答案。</p>\n<h3 id=\"示例-2：\">示例 2：<a title=\"#示例-2：\" href=\"#示例-2：\"></a></h3>\n<p>输入: “cbbd”<br>\n输出: “bb”</p>\n<h2 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h2>\n<h3 id=\"方法一：动态规划\">方法一：动态规划<a title=\"#方法一：动态规划\" href=\"#方法一：动态规划\"></a></h3>\n<h4 id=\"javascript-版本\">Javascript 版本<a title=\"#javascript-版本\" href=\"#javascript-版本\"></a></h4>\n<figure class=\"highlight javascript\"><figcaption><span>5. 最长回文子串</span><a href=\"https://github.com/Caesar-0925/Javascript-Algorithms/blob/main/src/algorithms/longestPalindrome.js\">longestPalindrome.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longestPalindrome</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = s.length</span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    注意：与Dart类似，在Javascript中，Array对象的fill方法会使用同一实例填充</span></span><br><span class=\"line\"><span class=\"comment\">    const dp = Array(len).fill(Array(len).fill(false)) </span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = <span class=\"built_in\">Array</span>.from(&#123; <span class=\"attr\">length</span>: len &#125;, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"literal\">false</span>))</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ans = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> l = <span class=\"number\">0</span>; l &lt; len; l++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i + l &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> j = i + l</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = s[i] == s[j]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dp[i][j] = (s[i] == s[j]) &amp;&amp; dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dp[i][j] &amp;&amp; l + <span class=\"number\">1</span> &gt; ans.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">          注意：与大多数编程语言不同，在Javascript中，使用String</span></span><br><span class=\"line\"><span class=\"comment\">          对象的substring方法截取出的字符串会包含最后一位</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        ans = s.substr(i, l + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"objective-c-版本\">Objective-C 版本<a title=\"#objective-c-版本\" href=\"#objective-c-版本\"></a></h4>\n<figure class=\"highlight objc\"><figcaption><span>5. 最长回文子串</span><a href=\"https://github.com/Caesar-0925/ObjectiveC-Algorithms/blob/main/ObjectiveC-Algorithms/algorithms/longestPalindrome/LongestPalindrome.m\">LongestPalindrome.m</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"built_in\">NSString</span> *)longestPalindrome:(<span class=\"built_in\">NSString</span> *)s &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSUInteger</span> len = s.length;</span><br><span class=\"line\">  <span class=\"built_in\">NSMutableArray</span> *dp = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>; m &lt; len; m++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">NSMutableArray</span> *temp = [<span class=\"built_in\">NSMutableArray</span> array];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; len; n++) &#123;</span><br><span class=\"line\">      [temp addObject:@<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [dp addObject:temp];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">NSString</span> *ans = <span class=\"string\">@&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; len; l++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i + l &lt; len; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> j = i + l;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = @<span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = [s characterAtIndex:i] == [s characterAtIndex:j] ? @<span class=\"number\">1</span> : @<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dp[i][j] = ([s characterAtIndex:i] == [s characterAtIndex:j]) &amp;&amp; [dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] isEqualTo:@<span class=\"number\">1</span>] ? @<span class=\"number\">1</span> : @<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ([dp[i][j] isEqualTo:@<span class=\"number\">1</span>] &amp;&amp; l + <span class=\"number\">1</span> &gt; ans.length) &#123;</span><br><span class=\"line\">        ans = [s substringWithRange:<span class=\"built_in\">NSMakeRange</span>(i, l + <span class=\"number\">1</span>)];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"swift-版本\">Swift 版本<a title=\"#swift-版本\" href=\"#swift-版本\"></a></h4>\n<figure class=\"highlight swift\"><figcaption><span>5. 最长回文子串</span><a href=\"https://github.com/Caesar-0925/Swift-Algorithms/blob/main/Swift-Algorithms.playground/Sources/LongestPalindrome.swift\">LongestPalindrome.swift</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">longestPalindrome</span><span class=\"params\">(<span class=\"keyword\">_</span> s: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = s.<span class=\"built_in\">count</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dp = [[<span class=\"type\">Bool</span>]](repeating: [<span class=\"type\">Bool</span>](repeating: <span class=\"literal\">false</span>, <span class=\"built_in\">count</span>: len), <span class=\"built_in\">count</span>: len)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ans = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; len &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; len - l &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> j = i + l</span><br><span class=\"line\">      <span class=\"keyword\">if</span> l == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> l == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/// 注意：在Swift中，String 数据结构没有便捷的下标访问方法和</span></span><br><span class=\"line\">        <span class=\"comment\">/// 字符串截取方法，需要自行实现</span></span><br><span class=\"line\">        dp[i][j] = s[i] == s[j]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dp[i][j] = (s[i] == s[j]) &amp;&amp; dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> dp[i][j] &amp;&amp; l + <span class=\"number\">1</span> &gt; ans.<span class=\"built_in\">count</span> &#123;</span><br><span class=\"line\">        ans = s.substring(i, i + l + <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dart-版本\">Dart 版本<a title=\"#dart-版本\" href=\"#dart-版本\"></a></h4>\n<figure class=\"highlight javascript\"><figcaption><span>5. 最长回文子串</span><a href=\"https://github.com/Caesar-0925/dart_algorithms/blob/main/bin/algorithms/longest_palindrome.dart\">longest_palindrome.dart</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> <span class=\"function\"><span class=\"title\">longestPalindrome</span>(<span class=\"params\"><span class=\"built_in\">String</span> s</span>)</span> &#123;</span><br><span class=\"line\">  final len = s.length; </span><br><span class=\"line\">  <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">    注意：这里勿使用filled静态方法创建List，Dart会使用同一个List实例填充</span></span><br><span class=\"line\"><span class=\"comment\">    final dp = List.filled(len, List.filled(len, false));</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  final dp = List.generate(len, <span class=\"function\">(<span class=\"params\">index</span>) =&gt;</span> List.filled(len, <span class=\"literal\">false</span>)); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> ans = <span class=\"string\">&#x27;&#x27;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> l = <span class=\"number\">0</span>; l &lt; len; l++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - l; i++) &#123;</span><br><span class=\"line\">      final j = i + l; </span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"literal\">true</span>; </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        dp[i][j] = s[i] == s[j]; </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dp[i][j] = (s[i] == s[j]) &amp;&amp; dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]; </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dp[i][j] &amp;&amp; l + <span class=\"number\">1</span> &gt; ans.length) &#123;</span><br><span class=\"line\">        ans = s.substring(i, i + l + <span class=\"number\">1</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"330. 按要求补齐数组","link":"2020/12/29/数据结构与算法/330-按要求补齐数组"},"next":{"title":"188. 买卖股票的最佳时机 IV","link":"2020/12/28/数据结构与算法/188-买卖股票的最佳时机IV"},"plink":"https://caesar-0925.github.io/2020/12/29/数据结构与算法/5-最长回文子串/","toc":[{"id":"题目","title":"题目","index":"1","children":[{"id":"示例-1：","title":"示例 1：","index":"1.1"},{"id":"示例-2：","title":"示例 2：","index":"1.2"}]},{"id":"题解","title":"题解","index":"2","children":[{"id":"方法一：动态规划","title":"方法一：动态规划","index":"2.1"}]}],"copyright":{"author":"Caesar-0925","published":"2020年12月29日","updated":"2020年12月29日","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}