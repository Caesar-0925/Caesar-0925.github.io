{"title":"330. 按要求补齐数组","date":"2020-12-29T15:34:46.000Z","date_formatted":{"ll":"2020年12月29日","L":"2020/12/29","MM-DD":"12-29"},"link":"2020/12/29/数据结构与算法/330-按要求补齐数组","comments":true,"tags":["贪心算法"],"categories":["数据结构与算法"],"updated":"2020-12-29T16:13:49.526Z","content":"<h2 id=\"题目\">题目<a title=\"#题目\" href=\"#题目\"></a></h2>\n<p>给定一个已排序的正整数数组 nums，和一个正整数  n 。从  [1, n]  区间内选取任意个数字补充到  nums  中，使得  [1, n]  区间内的任何数字都可以用  nums  中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p>\n<h3 id=\"示例- 1:\">示例  1:<a title=\"#示例- 1:\" href=\"#示例- 1:\"></a></h3>\n<p>输入: nums = [1,3], n = 6<br>\n输出: 1<br>\n解释:<br>\n根据 nums  里现有的组合  [1], [3], [1,3]，可以得出  1, 3, 4。<br>\n现在如果我们将  2  添加到  nums 中，  组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。<br>\n其和可以表示数字  1, 2, 3, 4, 5, 6，能够覆盖  [1, 6]  区间里所有的数。<br>\n所以我们最少需要添加一个数字。</p>\n<h3 id=\"示例-2:\">示例 2:<a title=\"#示例-2:\" href=\"#示例-2:\"></a></h3>\n<p>输入: nums = [1,5,10], n = 20<br>\n输出: 2<br>\n解释: 我们需要添加  [2, 4]。</p>\n<h3 id=\"示例- 3:\">示例  3:<a title=\"#示例- 3:\" href=\"#示例- 3:\"></a></h3>\n<p>输入: nums = [1,2,2], n = 5<br>\n输出: 0</p>\n<h2 id=\"题解\">题解<a title=\"#题解\" href=\"#题解\"></a></h2>\n<h3 id=\"方法一:-贪心算法\">方法一: 贪心算法<a title=\"#方法一:-贪心算法\" href=\"#方法一:-贪心算法\"></a></h3>\n<h4 id=\"javascript-版本\">Javascript 版本<a title=\"#javascript-版本\" href=\"#javascript-版本\"></a></h4>\n<figure class=\"highlight javascript\"><figcaption><span>330. 按要求补齐数组</span><a href=\"https://github.com/Caesar-0925/Javascript-Algorithms/blob/main/src/algorithms/minPatches.js\">minPatches.js</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">minPatches</span>(<span class=\"params\">nums, n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> patches = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.length</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; len &amp;&amp; nums[index] &lt;= x) &#123;</span><br><span class=\"line\">      x += nums[index]</span><br><span class=\"line\">      index++</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x *= <span class=\"number\">2</span></span><br><span class=\"line\">      patches++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> patches</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"objective-c-版本\">Objective-C 版本<a title=\"#objective-c-版本\" href=\"#objective-c-版本\"></a></h4>\n<figure class=\"highlight objc\"><figcaption><span>330. 按要求补齐数组</span><a href=\"https://github.com/Caesar-0925/ObjectiveC-Algorithms/blob/main/ObjectiveC-Algorithms/algorithms/330.minPatch/MinPatches.m\">MinPatches.m</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">NSUInteger</span>)minPatches:(<span class=\"built_in\">NSArray</span> *)nums inRange:(<span class=\"built_in\">NSUInteger</span>)n &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSUInteger</span> patches = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">NSUInteger</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">NSUInteger</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">NSUInteger</span> len = nums.count;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; len &amp;&amp; [[nums objectAtIndex:index] intValue] &lt;= x) &#123;</span><br><span class=\"line\">      x += [[nums objectAtIndex:index] intValue];</span><br><span class=\"line\">      index ++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x *= <span class=\"number\">2</span>;</span><br><span class=\"line\">      patches ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> patches;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"swift-版本\">Swift 版本<a title=\"#swift-版本\" href=\"#swift-版本\"></a></h4>\n<figure class=\"highlight swift\"><figcaption><span>330. 按要求补齐数组</span><a href=\"https://github.com/Caesar-0925/Swift-Algorithms/blob/main/Swift-Algorithms.playground/Sources/MinPatches.swift\">MinPatches.swift</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minPatches</span><span class=\"params\">(<span class=\"keyword\">_</span> nums: Array&lt;Int&gt;, <span class=\"keyword\">_</span> n: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> patches = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"built_in\">count</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">while</span> x &lt;= n &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> index &lt; len &amp;&amp; nums[index] &lt;= x &#123;</span><br><span class=\"line\">      x += nums[index]</span><br><span class=\"line\">      index += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x *= <span class=\"number\">2</span></span><br><span class=\"line\">      patches += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> patches</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"dart-版本\">Dart 版本<a title=\"#dart-版本\" href=\"#dart-版本\"></a></h4>\n<figure class=\"highlight javascript\"><figcaption><span>330. 按要求补齐数组</span><a href=\"https://github.com/Caesar-0925/dart_algorithms/blob/main/bin/algorithms/min_patches.dart\">min_patches.dart</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int <span class=\"function\"><span class=\"title\">minPatches</span>(<span class=\"params\">List&lt;int&gt; nums, int n</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> patches = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  final len = nums.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (x &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; len &amp;&amp; nums[index] &lt;= x) &#123;</span><br><span class=\"line\">      x += nums[index];</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      x *= <span class=\"number\">2</span>;</span><br><span class=\"line\">      patches++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> patches;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"5. 最长回文子串","link":"2020/12/29/数据结构与算法/5-最长回文子串"},"plink":"https://caesar-0925.github.io/2020/12/29/数据结构与算法/330-按要求补齐数组/","toc":[{"id":"题目","title":"题目","index":"1","children":[{"id":"示例- 1:","title":"示例  1:","index":"1.1"},{"id":"示例-2:","title":"示例 2:","index":"1.2"},{"id":"示例- 3:","title":"示例  3:","index":"1.3"}]},{"id":"题解","title":"题解","index":"2","children":[{"id":"方法一:-贪心算法","title":"方法一: 贪心算法","index":"2.1"}]}],"copyright":{"author":"Caesar-0925","published":"2020年12月29日","updated":"2020年12月29日","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)"}}